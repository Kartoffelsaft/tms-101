
def INP_UP    'W'
def INP_DOWN  'S'
def INP_LEFT  'A'
def INP_RIGHT 'D'

mov 0 @bg
mov 'L' @dtxt
mov 'o' @dtxt
mov 'a' @dtxt
mov 'd' @dtxt
mov 'i' @dtxt
mov 'n' @dtxt
mov 'g' @dtxt
mov '.' @dtxt
mov '.' @dtxt
mov '.' @dtxt

nxt

def CAMERA_POS_X &#b000
def CAMERA_POS_Y &#b001

def MAP_SEED &#dff0
mov @rng MAP_SEED
def MAP_DATA #e000 ; 128x64 world = 8192 spaces
def WORLD_WIDTH 128
def WORLD_HEIGHT 64

def ID_AIR          #00
def ID_DIRT         #01
def ID_GRASS        #02
def ID_STONE        #03
def ID_HELLSTONE    #04

; NOTE: this macro assumes that `col` and `to` do not refer to the same value
; same with `row`/`to`
?INDEX_WORLD col row to
mul row WORLD_WIDTH to
add to col to
add to MAP_DATA to
/?

?CLAMP_ZERO what
bnd what #8000 t
fjp no_clamp
mov 0 what
mrk no_clamp
/?

;
; World gen
;

mov 0 y
mrk world_col
    mov 0 x
    mrk world_row
        mov MAP_SEED @rng
        shf x 3 a
        shf y 3 b
        mul b 4 b
        add a b a

        mrk skip_to_rng
            mov a t
            fjp at_rng

            mov @rng @void
            sub a 1 a
            jmp skip_to_rng
        mrk at_rng
    
        bnd x #7 a
        bnd y #7 b
        sub 8 a a
        sub 8 b b

        bnd @rng #03ff c
        mul a c c
        mul b c d

        sub 8 a a

        bnd @rng #03ff c
        mul a c c
        mul b c c
        add d c d

        sub 8 a a
        sub 8 b b
        mov @rng @void
        mov @rng @void

        bnd @rng #03ff c
        mul a c c
        mul b c c
        add d c d

        sub 8 a a

        bnd @rng #03ff c
        mul a c c
        mul b c c
        add d c d

        shf d 1 d

        !INDEX_WORLD x y a

        sub y 8 c
        !CLAMP_ZERO c
        add c 1 c
        div #7fff c c
        sub #7800 c c
        mul y 256 b
        sub c b c
        !CLAMP_ZERO c

        sub d c t
        bnd t #8000 t
        fjp not_ground
            mov ID_STONE &a
            mul @rng x @rng
            bnd @rng b11 b
            add b 13 b
            sub y b t
            bnd t #8000 t
            fjp not_dirt
                mov ID_DIRT &a
                sub y 1 y
                !INDEX_WORLD x y b
                add y 1 y

                mov &b t
                tjp not_grass
                    mov ID_GRASS &a
                mrk not_grass
            mrk not_dirt

            bnd @rng b1111 b
            add b 46 b
            sub b y t
            bnd t #8000 t
            fjp not_hell
                mov ID_HELLSTONE &a
            mrk not_hell

            jmp gen_next_tile
        mrk not_ground
            mov ID_AIR &a

        ; sub y 3 t
        ; bnd t #8000 t
        ; fjp not_air
        ;     mov ID_AIR &a
        ;     jmp gen_next_tile
        ; mrk not_air

        ; sub y 3 t
        ; tjp not_grass
        ;     mov ID_GRASS &a
        ;     jmp gen_next_tile
        ; mrk not_grass

        ; sub y 4 t
        ; tjp not_dirt
        ;     mov ID_DIRT &a
        ;     jmp gen_next_tile
        ; mrk not_dirt

        ; mov ID_STONE &a

        mrk gen_next_tile
        add x 1 x
        sub x WORLD_WIDTH t
    tjp world_row

    add y 1 y
    sub y WORLD_HEIGHT t
tjp world_col

!INDEX_WORLD 12 8 a
mov ID_AIR &a


mrk gameloop
    mrk next_input
        mov @input a
        mov a t
        fjp no_input

        sub a INP_UP t
        tjp inp_no_up
            sub CAMERA_POS_Y 1 CAMERA_POS_Y

            bnd CAMERA_POS_Y #8000 t
            fjp next_input
                mov 0 CAMERA_POS_Y
            
            jmp next_input
        mrk inp_no_up

        sub a INP_DOWN t
        tjp inp_no_down
            add CAMERA_POS_Y 1 CAMERA_POS_Y

            mul WORLD_HEIGHT 8 b
            sub b @resy b
            sub b CAMERA_POS_Y t
            bnd t #8000 t
            fjp next_input
                mov b CAMERA_POS_Y

            jmp next_input
        mrk inp_no_down

        sub a INP_LEFT t
        tjp inp_no_left
            sub CAMERA_POS_X 1 CAMERA_POS_X

            bnd CAMERA_POS_X #8000 t
            fjp next_input
                mov 0 CAMERA_POS_X

            jmp next_input
        mrk inp_no_left

        sub a INP_RIGHT t
        tjp inp_no_right
            add CAMERA_POS_X 1 CAMERA_POS_X

            mul WORLD_WIDTH 8 b
            sub b @resx b
            sub b CAMERA_POS_X t
            bnd t #8000 t
            fjp next_input
                mov b CAMERA_POS_X

            jmp next_input
        mrk inp_no_right

        jmp next_input
    mrk no_input

    ; Drawing

    mov b00101_011100_11100 @bg

    shf CAMERA_POS_X 3 t
    shf CAMERA_POS_Y 3 b

    add CAMERA_POS_X @resx c
    add CAMERA_POS_Y @resy d

    ; We use `t` instead of `a` for indexing to prevent  
    ; the macro clobbering its inputs when calculating
    !INDEX_WORLD t b a

    mul t 8 x
    sub x CAMERA_POS_X x
    mul b 8 y
    sub y CAMERA_POS_Y y

    mrk draw_next_tile
        bnd &a #ff @draw

        sub x c t
        bnd t #8000 t
        tjp no_new_row
            add y 8 y
            add b 1 b
            
            sub y d t
            bnd t #8000 t
            fjp done_drawing_tiles

            shf CAMERA_POS_X 3 t
            !INDEX_WORLD t b a

            mul t 8 x
            sub x CAMERA_POS_X x
        jmp draw_next_tile

        mrk no_new_row
            add a 1 a
        jmp draw_next_tile
    mrk done_drawing_tiles

    nxt
jmp gameloop
