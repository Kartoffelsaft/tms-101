; Pong
;
; Player 1 is controlled with W and S
; Player 2 is controlled with arrow keys
;

; Memory layout:
;
; #0000 .. #ffcf: unused
; #ffd0 .. #ffdf: player data
; #fff0 .. #ffff: ball data

def BALL_POS_X &#ffff
def BALL_POS_Y &#fffe
; BALL_VEL contains both horizontal and vertical velocity info
; 00 -> up-left, 01 -> up-right, 10 -> down-left, -> 11 down-right
def BALL_VEL   &#fffd

bnd @rng b11 BALL_VEL
div @resx 2 BALL_POS_X
div @resy 2 BALL_POS_Y

def NET_SPRITE #02
def P1_PADDLE_SPRITE #00
def P2_PADDLE_SPRITE #01
def    PADDLE_STRIDE #10

def P1_POS_Y &#ffdd
def P1_POS_X &#ffdc
def P2_POS_Y &#ffdb
def P2_POS_X &#ffda

def P1_SCORE &#ffd9
def P2_SCORE &#ffd8

mov 4 P1_POS_X
sub @resx 12 P2_POS_X

def P1_UP   'W'
def P1_DOWN 'S'
def P2_UP   265 ; up arrow key
def P2_DOWN 264 ; down arrow key

mrk gameloop
    ; player input

    mrk next_input
        mov @input a
        mov a t
        fjp no_input ; @input starts to evaluate to 0 when there is no input

        ; subtraction is useful for checking equality
        sub a P1_UP t
        tjp p1_no_up
            sub P1_POS_Y 1 P1_POS_Y

            ; How to test if a number (P1_POS_Y in this case) is <0
            bnd P1_POS_Y #8000 t
            fjp next_input
                mov 0 P1_POS_Y
            jmp next_input
        mrk p1_no_up

        sub a P1_DOWN t
        tjp p1_no_down
            add P1_POS_Y 1 P1_POS_Y

            ; Test if P1_POS_Y <= resx + 24 (pixel height of paddle)
            sub @resy P1_POS_Y t
            sub t 24 t
            bnd t #8000 t
            fjp next_input
                sub @resy 24 P1_POS_Y
            jmp next_input
        mrk p1_no_down

        sub a P2_UP t
        tjp p2_no_up
            sub P2_POS_Y 1 P2_POS_Y
            bnd P2_POS_Y #8000 t
            fjp next_input
                mov 0 P2_POS_Y
            jmp next_input
        mrk p2_no_up

        sub a P2_DOWN t
        tjp p2_no_down
            add P2_POS_Y 1 P2_POS_Y
            sub @resy P2_POS_Y t
            sub t 24 t
            bnd t #8000 t
            fjp next_input
                sub @resy 24 P2_POS_Y
            jmp next_input
        mrk p2_no_down

        prn P2_POS_Y
    jmp next_input
    mrk no_input


    ; ball physics

    bnd BALL_VEL 1 x
    bnd BALL_VEL 2 y
    shf y 1 y
    mul x 2 x
    sub x 1 x
    mul y 2 y
    sub y 1 y

    add BALL_POS_X x x
    add BALL_POS_Y y y
    mov x BALL_POS_X
    mov y BALL_POS_Y 
    
    sub x P1_POS_X t
    sub t 8 t ; account for width of sprite
    bnd t #8000 t
    fjp noscoreon_p1
        sub y P1_POS_Y t
        bnd t #8000 t
        tjp scoreon_p1

        sub P1_POS_Y y t
        add t 24 t
        bnd t #8000 t
        tjp scoreon_p1

            ; bounce ball
            bnd @rng 1 b
            shf b -1 b
            bxr BALL_VEL b BALL_VEL
            bxr BALL_VEL 1 BALL_VEL
            jmp noscoreon_p1

        mrk scoreon_p1
            add P2_SCORE 1 P2_SCORE

            ; reset ball
            bnd @rng b11 BALL_VEL
            div @resx 2 BALL_POS_X
            div @resy 2 BALL_POS_Y
    mrk noscoreon_p1

    sub P2_POS_X x t
    bnd t #8000 t
    fjp noscoreon_p2
        sub y P2_POS_Y t
        bnd t #8000 t
        tjp scoreon_p2

        sub P2_POS_Y y t
        add t 24 t
        bnd t #8000 t
        tjp scoreon_p2

            ; bounce ball
            bnd @rng 1 b
            shf b -1 b
            bxr BALL_VEL b BALL_VEL
            bxr BALL_VEL 1 BALL_VEL
            jmp noscoreon_p2

        mrk scoreon_p2
            add P1_SCORE 1 P1_SCORE

            ; reset ball
            bnd @rng b11 BALL_VEL
            div @resx 2 BALL_POS_X
            div @resy 2 BALL_POS_Y
    mrk noscoreon_p2

    bnd y #8000 t
    fjp no_top_bounce
        bxr BALL_VEL 2 BALL_VEL
    mrk no_top_bounce
    sub y @resy t
    bnd t #8000 t
    tjp no_bottom_bounce
        bxr BALL_VEL 2 BALL_VEL
    mrk no_bottom_bounce

    ; Drawing

    ; Dark gray background
    mov b00001_000010_00001 @bg

    ; Net
    div @resx 2 x
    sub x 4 x
    mov 0 y

    mrk next_net
        mov NET_SPRITE @draw
        sub x 8 x ; When drawing vertically you need to cancel out the automatic x movements
        add y 8 y
        sub y @resy t
    tjp next_net

    ; Scores
    mov 1 y
    div @resx 4 x
    sub x 3 x
    mov b11111_000000_00000 @tcol
    mov P1_SCORE @dnum

    div @resx 4 x
    mul x 3 x
    sub x 3 x
    mov b00000_000000_11111 @tcol
    mov P2_SCORE @dnum

    ; Ball
    mov BALL_POS_X x
    mov BALL_POS_Y y
    mov #ffff @blit

    ; Player paddles
    mov P1_PADDLE_SPRITE a
    mov P1_POS_X x
    mov P1_POS_Y y

    mov a @draw
    add PADDLE_STRIDE a a
    sub x 8 x
    add y 8 y
    mov a @draw
    add PADDLE_STRIDE a a
    sub x 8 x
    add y 8 y
    mov a @draw


    mov P2_PADDLE_SPRITE a
    mov P2_POS_X x
    mov P2_POS_Y y

    mov a @draw
    add PADDLE_STRIDE a a
    sub x 8 x
    add y 8 y
    mov a @draw
    add PADDLE_STRIDE a a
    sub x 8 x
    add y 8 y
    mov a @draw


    nxt
jmp gameloop
